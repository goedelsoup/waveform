# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: Â© 2025 Cory Parent <goedelsoup+waveform@goedelsoup.io>

# Advanced Contract Example: Temporal Validation
# This contract demonstrates time-based validation rules for performance monitoring
# and SLA compliance checking.

publisher: "performance-monitor"
version: "3.0.0"
description: "Performance monitoring contract with temporal validation and SLA checks"

pipeline_selectors:
  selectors:
    - field: "type"
      operator: "equals"
      value: "trace"
    - field: "tags.monitoring"
      operator: "equals"
      value: "performance"
  priority: 15

inputs:
  traces:
    - span_name: "database_query"
      service_name: "user-service"
      attributes:
        db.system: "postgresql"
        db.operation: "SELECT"
        db.table: "users"
        query.complexity: "high"

  metrics:
    - name: "http_request_duration_seconds"
      type: "histogram"
      value: 0.250
      labels:
        method: "GET"
        endpoint: "/api/users"
        status: "200"

# Temporal validation rules
validation_rules:
  # Database query performance SLA
  - field: "span.duration"
    operator: "less_than"
    value: "500ms"
    temporal:
      window_size: "5m"
      aggregation: "p95"
      threshold: "300ms"
      comparison: "less_than"
      baseline: "previous_week"
      tolerance: 0.15
    description: "Database queries should meet P95 SLA of 300ms"
    severity: "error"

  # Request rate validation
  - field: "metric.value"
    operator: "in_range"
    range:
      min: 10
      max: 1000
    temporal:
      window_size: "1m"
      aggregation: "count"
      threshold: 500
      comparison: "less_than"
    description: "Request rate should be within normal range"
    severity: "warning"

  # Anomaly detection based on historical patterns
  - field: "span.attributes.response_size"
    operator: "in_range"
    range:
      min: 100
      max: 10000
    temporal:
      window_size: "1h"
      aggregation: "avg"
      baseline: "previous_day"
      tolerance: 0.25
    description: "Response size should be within normal historical range"
    severity: "info"

  # Peak hour performance validation
  - field: "span.duration"
    operator: "less_than"
    value: "1s"
    condition:
      and:
        - field: "span.start_time"
          operator: "in_range"
          range:
            min: "09:00"
            max: "17:00"
        - field: "span.attributes.load_type"
          operator: "equals"
          value: "peak"
    temporal:
      window_size: "10m"
      aggregation: "max"
      threshold: "800ms"
      comparison: "less_than"
    description: "Peak hour performance must be maintained"
    severity: "error"

matchers:
  traces:
    - span_name: "database_query"
      service_name: "user-service"
      attributes:
        db.system: "postgresql"
        db.operation: "SELECT"
        db.table: "users"
        query.optimized: true  # Should be added by query optimizer
        cache.hit: false       # Should indicate cache miss

      validation_rules:
        # Validate query optimization
        - field: "span.attributes.query.optimized"
          operator: "equals"
          value: true
          description: "All queries should be optimized"

        # Complex cache validation
        - field: "span.attributes.cache.hit"
          operator: "equals"
          value: true
          condition:
            if:
              field: "span.attributes.query.complexity"
              operator: "equals"
              value: "low"
            then:
              field: "span.attributes.cache.hit"
              operator: "equals"
              value: true
            else:
              field: "span.duration"
              operator: "less_than"
              value: "200ms"

        # Performance tier validation
        - field: "span.duration"
          operator: "less_than"
          value: "100ms"
          condition:
            if:
              field: "span.attributes.query.complexity"
              operator: "equals"
              value: "low"
            then:
              field: "span.duration"
              operator: "less_than"
              value: "50ms"
            else:
              field: "span.duration"
              operator: "less_than"
              value: "200ms"

      duration:
        min: "1ms"
        max: "500ms"
        expected: "150ms"
        tolerance: "50ms"

      count:
        min: 1
        max: 5
        operator: "in_range"

  metrics:
    - name: "http_request_duration_seconds"
      type: "histogram"
      labels:
        method: "GET"
        endpoint: "/api/users"
        status: "200"
        performance_tier: "optimized"  # Should be classified by performance

      validation_rules:
        # Histogram bucket validation
        - field: "metric.histogram.p50"
          operator: "less_than"
          value: 0.100
          description: "P50 latency should be under 100ms"

        - field: "metric.histogram.p95"
          operator: "less_than"
          value: 0.300
          description: "P95 latency should be under 300ms"

        - field: "metric.histogram.p99"
          operator: "less_than"
          value: 0.500
          description: "P99 latency should be under 500ms"

        # Performance classification validation
        - field: "metric.labels.performance_tier"
          operator: "one_of"
          values: ["fast", "optimized", "slow", "timeout"]
          condition:
            if:
              field: "metric.value"
              operator: "less_than"
              value: 0.100
            then:
              field: "metric.labels.performance_tier"
              operator: "equals"
              value: "fast"

      histogram:
        buckets: [0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1.0, 2.5, 5.0, 10.0]
        count: 1
        sum: 0.250

      value:
        range:
          min: 0.001
          max: 1.000
        tolerance: 0.05

# Advanced time window configurations
time_windows:
  # SLA monitoring window
  - aggregation: "p95"
    duration: "5m"
    expected_behavior: "maintain_sla"

  # Anomaly detection window
  - aggregation: "stddev"
    duration: "1h"
    expected_behavior: "detect_anomalies"

  # Capacity planning window
  - aggregation: "max"
    duration: "24h"
    expected_behavior: "capacity_planning"

# Schema validation for temporal contracts
schema:
  version: "3.0"
  required_fields: ["publisher", "version", "validation_rules", "time_windows"]
  field_types:
    temporal: "object"
    time_windows: "array"
  validation_rules:
    - field: "validation_rules"
      type: "array"
      required: true
      min_length: 1
      description: "At least one validation rule required"
    - field: "time_windows"
      type: "array"
      required: true
      min_length: 1
      description: "At least one time window required for temporal contracts"
